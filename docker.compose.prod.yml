version: "3.8"

services:
  bot:
    build: .
    container_name: monitor-bot-prod
    restart: always
    volumes:
      - bot-data:/home/appuser/app/data
      - ./config.yaml:/home/appuser/app/config.yaml:ro
    environment:
      - TELEGRAM_TOKEN_FILE=/run/secrets/telegram_token
      - ADMIN_USER_IDS=${ADMIN_USER_IDS}
      - DB_URL=postgresql://user:pass@postgres:5432/monitordb
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_CHECKS=100
      - MIN_INTERVAL_SECONDS=20
      - TELE_WORKERS=5
    secrets:
      - telegram_token
      - admin_api_key
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f bot.py || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  postgres:
    image: postgres:15-alpine
    container_name: monitor-postgres
    restart: always
    environment:
      - POSTGRES_DB=monitordb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - monitor-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  bot-data:
  postgres-data:

secrets:
  telegram_token:
    file: ./secrets/telegram_token.txt
  admin_api_key:
    file: ./secrets/admin_api_key.txt
  db_password:
    file: ./secrets/db_password.txt

networks:
  monitor-net:
    driver: bridge